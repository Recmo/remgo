#include "SymmetryGroup.h"

const uint16 SymmetryGroup::_masks[SymmetryGroup::_numGroups] = {
	0x0001,
	0x0005,
	0x0011,
	0x0021,
	0x0035,
	0x0041,
	0x0081,
	0x00c5,
	0x00ff,
	0x0101,
	0x0401,
	0x1001,
	0x1111,
	0x1421,
	0x2001,
	0x2121,
	0x2411,
	0x3005,
	0x3ac5,
	0x4001,
	0x4141,
	0x4481,
	0x8001,
	0x8181,
	0x8441,
	0xc5c5,
	0xffff
};

const uint8 SymmetryGroup::_normalized[SymmetryGroup::_numGroups][Rotation::groupSize] = {
	{ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15},
	{ 0,  1,  0,  1,  4,  4,  6,  6,  8,  9,  8,  9, 12, 12, 14, 14},
	{ 0,  1,  2,  3,  0,  2,  1,  3,  8,  9, 10, 11,  8, 10,  9, 11},
	{ 0,  1,  2,  3,  2,  0,  3,  1,  8,  9, 10, 11, 10,  8, 11,  9},
	{ 0,  1,  0,  1,  0,  0,  1,  1,  8,  9,  8,  9,  8,  8,  9,  9},
	{ 0,  1,  2,  3,  3,  1,  0,  2,  8,  9, 10, 11, 11,  9,  8, 10},
	{ 0,  1,  2,  3,  1,  3,  2,  0,  8,  9, 10, 11,  9, 11, 10,  8},
	{ 0,  1,  0,  1,  1,  1,  0,  0,  8,  9,  8,  9,  9,  9,  8,  8},
	{ 0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8,  8,  8,  8},
	{ 0,  1,  2,  3,  4,  5,  6,  7,  0,  1,  2,  3,  4,  5,  6,  7},
	{ 0,  1,  2,  3,  4,  5,  6,  7,  2,  3,  0,  1,  5,  4,  7,  6},
	{ 0,  1,  2,  3,  4,  5,  6,  7,  4,  6,  5,  7,  0,  2,  1,  3},
	{ 0,  1,  2,  3,  0,  2,  1,  3,  0,  1,  2,  3,  0,  2,  1,  3},
	{ 0,  1,  2,  3,  2,  0,  3,  1,  2,  3,  0,  1,  0,  2,  1,  3},
	{ 0,  1,  2,  3,  4,  5,  6,  7,  5,  7,  4,  6,  2,  0,  3,  1},
	{ 0,  1,  2,  3,  2,  0,  3,  1,  0,  1,  2,  3,  2,  0,  3,  1},
	{ 0,  1,  2,  3,  0,  2,  1,  3,  2,  3,  0,  1,  2,  0,  3,  1},
	{ 0,  1,  0,  1,  4,  4,  6,  6,  4,  6,  4,  6,  0,  0,  1,  1},
	{ 0,  1,  0,  1,  1,  1,  0,  0,  1,  0,  1,  0,  0,  0,  1,  1},
	{ 0,  1,  2,  3,  4,  5,  6,  7,  6,  5,  7,  4,  3,  1,  0,  2},
	{ 0,  1,  2,  3,  3,  1,  0,  2,  0,  1,  2,  3,  3,  1,  0,  2},
	{ 0,  1,  2,  3,  1,  3,  2,  0,  2,  3,  0,  1,  3,  1,  0,  2},
	{ 0,  1,  2,  3,  4,  5,  6,  7,  7,  4,  6,  5,  1,  3,  2,  0},
	{ 0,  1,  2,  3,  1,  3,  2,  0,  0,  1,  2,  3,  1,  3,  2,  0},
	{ 0,  1,  2,  3,  3,  1,  0,  2,  2,  3,  0,  1,  1,  3,  2,  0},
	{ 0,  1,  0,  1,  1,  1,  0,  0,  0,  1,  0,  1,  1,  1,  0,  0},
	{ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
};

SymmetryGroup::SymmetryGroup(uint16 mask)
: _index(0)
{
	for(; _index < _numGroups; ++_index)
		if(_masks[_index] == mask)
			break;
	assert(_index != _numGroups);
}


Rotation SymmetryGroup::normalizeCalculate(Rotation r) const
{
	uint16 mask = _masks[_index];
	Rotation lowest = r;
	for(Rotation a: Rotation::all) {
		if(mask & 1) {
			Rotation b = r * a;
			if(b < lowest)
				lowest = b;
		}
		mask >>= 1;
	}
	return lowest;
}
